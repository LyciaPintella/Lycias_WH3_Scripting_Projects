https://discord.com/channels/373745291289034763/1101160095544512645

As promised, a brief overview of some of the new AI tables and their functionality that have been added during WH3 development, and it the patches since its launch. Hope this proves to be useful.

AI Occupation:
The occupation_decision_component column in the cai_personalities table is fully deprecated and by extension the cai_personality_occupation_decision_components, cai_personality_occupation_decision_policies, and cai_personality_occupation_decision_priorities tables all have no effect. If you want to modify occupation decision logic go to the cai_decision_policy_junctions table and search for occupation. (see GDS section for more detail about how this works). The profile for the occupation decision logic wants to go in the gds_occupation_decision_profile column in the cai_personalities table (you can ignore the gds_cultural… column, all occupation options are handled by the previous column). 

AI Military configuration:
There was one new table added in 2.0 (cdir_military_generator_unit_group_overrides). It allows you to specify one group as the parent of another group. The military generator gets a list of all the groups in the template and all their parents. Then it will go over all the units available and assign them to the most specific group (above that units original group in the parental chain) that appears in the template. It also will, if a unit group has ratio assigned but no units available, give that ratio to the original groups parent (although this step is non-recursive). (Before 2.0 if the AI couldn't recruit any units from a particular group, then the ratio was split between the other groups available in the template). If you want to test configurations, the same logic is used to generate armies in skirmish vs AI (note stuff like recruitment time isn't taken into account here but it is in game)


Personality Region Groups:
We've mostly stopped using the old way of providing hints to the AI about which regions to go for (the cai_region_hint series of tables), although all the functionality still works for these tables. Instead we use the personality_region_group series of tables, which has the main advantage of being personality based and allows for the switching of hint regions on certain turn thresholds. The region to region groups mapping is done in the regions_to_region_groups_junctions table, (search for cai_region_hint… for IE and cai_chaos_region_hint… for RoC). These lead to task generation through GDS task generators (more on them later) and diplomacy through the region_hint fields in the cai_personality_deal_evaluation_deal_component_values table.

Faction Potential:
This system was designed as a replacement and upgrade to the campaign_difficulty_handicap_effects table. It allows you to Modify AI handicaps/bonuses is a much more granular system than previously. The buffs are defined in the faction_potential_handicap_effects table, scaling from value_min to value_max linearly between faction_potential_min and faction_potential_max. You can define additional faction potential changes to specific campaigns for when you are playing specific factions on specific difficulties in the faction_potential_difficulty_overrides table. You can also define specific personality overrides, but in practice this is rarely useful. 
Strategic Threat :
In theory this offers a much more organic and natural feeling way of making factions gang up on the stronger ones, replacing the old hardcoded anti-player bias generators (which have been entirely disabled on IE). You can set the threat threshold required for a faction to consider another its main threat in the cai_personality_strategic_components table. The formula for working out the strategic threat is base_score * attitude_multiplier * direct_actions_mulitplier * proximity_multiplier * personality_multiplier_player, with these values mostly being configured in the cai_personality_variables table. The personality multiplier player is effectively set to 1 for all AI factions. The base score is configured in the campaign_variables table and consists of doing hostile actions and owning large numbers of settlements and armies. You can make diplomatic actions less or more likely with a faction's main threat or other factions which share that faction's main threat by using the main threat and common threat columns in the cai_personality_deal_evaluation_deal_component_values table. 
Generic Decision System.
By far the most complex of the new AI systems. This allows the AI to make decisions about when to use a large number of features in the game. The relevant tables are cai_decision… cai_domains.. and cai_quer… By specifying logic in the cai_decision_policy_junctions you can get the AI to use advanced logic for most features in the game, such as occupation decisions, commandments, or faction specific features.

There are several key concepts behind this feature. The first is the decision_item. You can specify these in the cai_decision_items table, and involves creating a key which corresponds to taking a specific action in the game, such as activating a ritual, enabling or disabling an initiative, or selecting an occupation option. These are bound together by a decisions policy, which corresponds to a decision profile, which is linked to a personality.

The second is the domain. This corresponds to a group of game objects, and works similarly to the campaign effect scopes, but is a more advanced system, allowing an indefinite number of modifications to the group. You could use this to specify a group as specific as two specific regions within a narrow turn threshold, or something as generic as all enemy armies. By default a domain will return all valid options for a domain. You can score domains by hooking them up to the cai_domain_scoring_junctions table and then change the algorithm in the cai_domains to pick_best if you wish to only return the top X scoring of that domain. (Note that if the domain isn't scored pick_best will return a X objects within that domain effectively at random). 
In the cai_decision_policy_domain_junctions table you can specify the source and target domains of entire decision policies (and so all decision items within them), or individual decision items within a policy. The source domain refers to the domain from which the item acts, such as characters, or military forces. (It should be noted that you will often need to explicitly add restrictions such as only alive characters to your domain). If it isn't obvious what the source domain should be, it probably wants to be our_faction, but take a look at what we've done and that should give you an idea. The target domain refers to the domain on which the item acts, and should correspond to the target of a particular ritual. (with rituals that don't have targets, such as the ones in Ikit's Workshop, you don't need to specify a target). You can make the source domain more specific than the actual availability of the ritual, in which case the AI will only use that item through that policy when the more specific domain is met, such as using a rite which causes attrition to hostile forces in friendly territory only when there are hostile armies within that factions territory.

The third concept is queries. These are used in the cai_decision_policy_junctions table to provide logic for when specific decision items should be used. The queries themselves are hardcoded, and you can modify the threshold at which they are active by using a query variable set. You can specify queries for decision policies as well as decision items, in which case the query will be applied to all decision items within that policy. 
It is worth noting that you need to be careful with these tables, a slight error in domain will cause the AI logic for whatever feature you are considering to fail silently. Another key point is that the GDS will not evaluate things that faction can't afford. (This means if you have a slowly incrementing amount of resources, but options at many different tiers of spending, you will need to actively create logic to disallow the cheaper options in some circumstances, if you want the more expensive ones to ever be picked). 

The second use of the generic decision system is to create your own task generators, which you can use to control the movement of the AI's forces on the map. Using the cai_gds_task_generators table it is possible to create new task generators by specifying a task type, a source domain, a target domain, and optionally a third party domain. The task types are hopefully self-explanatory and tell the AI what sort of thing it should be doing (attacking a region, attacking an agent, defending a region etc). The source domain wants to be either our_faction or our_faction_some_condition (such as only activating after certain turn thresholds). The target domain refers to the things you want the task to be targetting (such as enemy armies), but please make sure that the target is something that the task type can operate on - Don't try making a defend task with the target of enemy_settlements for example. The thirds party domain refers to which forces (or agents) are eligible to be used for tasks created by this generator, leaving it blank will allow all forces/agents. 

This invalidated the old logic for rituals, initiatives of all kinds, and occupation options so all of those tables either no longer work, or have been removed. 
Pooled Resource Budgeting 

The AI budgeting logic can now support budgeting for pooled resources. In the cai_personalities_pooled_resource_to_allocations_junctions you can set up budgetary and income policies for particular pooled resources. These are set up the same way as the treasury specific income and budgetary policies, but in the cai_finance_pooled_resource_upkeep_to_budget_junctions you are able to hook up particular pooled resource factors to budget categories. I recommend using the characters and technology budget categories if there is not a clear category that fits in your use case, as those are both unused in Warhammer 3. It is also possible to set a GDS policy to use the pooled resource or treasury from a specific budgetary pool in the cai_decision_policies table. To give an example the Chaos Dwarf AI splits its armaments income into 2 pools, one of which is used for construction and the other of which is used for unlocking units caps. Note the GDS doesn't have support for ongoing upkeep costs, but the other budgetary systems does, so the AI will only build factories / gold lines if it can afford the raw materials upkeep. If there is only one way to spend the pooled resource, then you don’t need to set this system up, as by default everything is taken from the global pool. 